//
//  CoinsListViewController.swift
//  MarketCoins
//
//  Created by Gabriel Francisco on 24/07/23.
//  Copyright (c) 2023 DEVFAST.CO. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CoinsListDisplayLogic: AnyObject {
    func displayGlobalValues(viewModel: CoinsList.FetchGlobalValues.ViewModel)
    func displayListCoins(viewModel: CoinsList.fetchListCoins.ViewModel)
    func displayError(erro: String)
}

class CoinsListViewController: UIViewController {
    
    @IBOutlet weak var globalCollectionView: UICollectionView!{
        didSet {
            globalCollectionView.dataSource = self
        }
    }
    
    @IBOutlet weak var filterCollectionView: UICollectionView! {
        didSet{
            filterCollectionView.delegate = self
            filterCollectionView.dataSource = self
        }
    }
    
    @IBOutlet weak var listCoinsTableView: UITableView! {
        didSet{
            listCoinsTableView.delegate = self
            listCoinsTableView.dataSource  = self
        }
    }
    
    private var globalViewModel: CoinsList.FetchGlobalValues.ViewModel?
    private var coinsViewModel: CoinsList.fetchListCoins.ViewModel?
    
    var interactor: CoinsListBusinessLogic?
    var router: (NSObjectProtocol & CoinsListRoutingLogic & CoinsListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CoinsListInteractor()
        let presenter = CoinsListPresenter()
        let router = CoinsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doFetchGlobalValues()
        doFetchCoinsList()
    }
  
    func doFetchGlobalValues() {
        let request = CoinsList.FetchGlobalValues.Request(baseCoin: "brl")
        interactor?.doFetchGlobalValues(request: request)
    }
    
    func doFetchCoinsList() {
        let request = CoinsList.fetchListCoins.Request(baseCoin: "brl",
                                                       orderBy: "market_cap_desc",
                                                       top: 10,
                                                       pricePercentage: "1h")
        interactor?.doFetchListCoins(request: request)
    }
  
}


extension CoinsListViewController: CoinsListDisplayLogic{
    
    func displayGlobalValues(viewModel: CoinsList.FetchGlobalValues.ViewModel) {
     globalViewModel = viewModel
    }
    
    func displayListCoins(viewModel: CoinsList.fetchListCoins.ViewModel) {
        coinsViewModel = viewModel
    }
    
    func displayError(erro: String) {print(erro)}
    
}

extension CoinsListViewController: UICollectionViewDelegate {}
extension CoinsListViewController: UICollectionViewDataSource {
    
}
extension CoinsListViewController: UITableViewDelegate{}
extension CoinsListViewController: UITableViewDataSource{}
                                        
